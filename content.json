{"meta":{"title":"skuukzky","subtitle":"眠","description":"","author":"skuukzky","url":"https://lpy30m.github.io/skuukzky.github.io","root":"/skuukzky.github.io/"},"pages":[{"title":"朋友","date":"2024-08-23T04:00:00.000Z","updated":"2024-08-23T04:05:46.556Z","comments":true,"path":"PY.html","permalink":"https://lpy30m.github.io/skuukzky.github.io/PY.html","excerpt":"","text":"今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵诗书，无奔走之劳矣；有司业、博士为之师，未有问而不告，求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。其业有不精，德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！ 使用网站SyntaxError: Unexpected token in JSON at position 330 朋友每次编译时，随机排序 添加友链你可以直接编辑：https://github.com/nexmoe/nexmoe.com/edit/main/source/PY.md 也可以使用如下格式方便懒狗我复制粘贴 123456&#123; &quot;title&quot;: &quot;折影轻梦&quot;, &quot;link&quot;: &quot;https://nexmoe.com&quot;, &quot;img&quot;: &quot;https://cravatar.cn/avatar/c7fd185f8c967dec20c29c75a40b9e09?s=500&quot;, &quot;des&quot;: &quot;为热爱战斗着，努力学着变得勇敢&quot;&#125;"},{"title":"关于","date":"2024-08-23T04:14:22.573Z","updated":"2024-08-23T04:14:22.573Z","comments":true,"path":"about.html","permalink":"https://lpy30m.github.io/skuukzky.github.io/about.html","excerpt":"","text":"我是谁导航"},{"title":"文章归档","date":"2024-08-23T04:09:57.710Z","updated":"2024-08-23T04:09:53.839Z","comments":true,"path":"archive.html","permalink":"https://lpy30m.github.io/skuukzky.github.io/archive.html","excerpt":"","text":""},{"title":"","date":"2024-08-23T04:29:48.127Z","updated":"2024-08-23T04:29:48.127Z","comments":true,"path":"custom.css","permalink":"https://lpy30m.github.io/skuukzky.github.io/custom.css","excerpt":"","text":":root { --color-shadow: rgb(204 177 161 / 60%); } body { overflow-x: hidden; } #nexmoe-content .nexmoe-post-footer { background-color: transparent; } iframe { width: 100% !important; } article ul li { line-height: 1.5rem; }"},{"title":"赞助我","date":"2024-08-23T05:42:09.000Z","updated":"2024-08-23T05:42:10.472Z","comments":true,"path":"donate.html","permalink":"https://lpy30m.github.io/skuukzky.github.io/donate.html","excerpt":"","text":"还是留给自己买 kfc 吧"}],"posts":[{"title":"安居客参数分析","slug":"逆向/安居客参数分析","date":"2024-08-23T05:52:22.000Z","updated":"2024-08-23T05:52:23.320Z","comments":true,"path":"2024/08/23/逆向/安居客参数分析/","permalink":"https://lpy30m.github.io/skuukzky.github.io/2024/08/23/%E9%80%86%E5%90%91/%E5%AE%89%E5%B1%85%E5%AE%A2%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90/","excerpt":"","text":"安居客参数分析前言手机里之前装过很多杂乱软件，最近闲来无事，又在学习 app 的东西，翻来翻来就找到了这个找房软件，于是想着分析一下，在此记录一下过程，也算是成长过程的小经历了，话不多开，分析开始。 请求分析 这个抓包软件是 Proxyman，Charles 在 mac 我目前还没找到好的汉化的，英文的用的也不是很舒服，所以就用 Proxyman 代替了，我们看到了加密参数特别显眼的就是nsign和 nsign_uuid 应该是和nsign有关和get_md5&#96; 参数分析做 app 逆向第一步肯定就是反编译了，不过在此之前我们还需要查看 app 是否加固，否则没办法得到大概的源代码，我们用 appmsg 进行查看。 ​ 很好啊，没有加固，我们直接 jadx 进行反编译即可。 nsign 进入了 SignUtil.c 的方法，而 SignUtil.c 则在函数中调用了一个 getSign0 的 native 方法。 ​ 我们直接打开 ida 啊，去找一下 SignUtil 这个 so 文件 ​ 是个静态注册，而且代码也没什么混淆，还是很利于我们分析的，其实我们也可以trace_natives这个 ida 插件，就能获取 SO 代码段中所有函数的偏移地址，再使用 frida-trace 批量 trace so 函数的调用。(由于 mac 下暂无高版本的 ida pro,所以我此处用 Windows 的 ida7.7 演示.) 图没截全，我们根据最开始的 sub_18f0 找过去，我们先静态分析一下代码, 发现 get_sign 这个函数比较亮眼，而我们刚才 trace 的过程中也有这个函数的调用，所以我们继续反编译分析查看 1qsort(v11, v9, 24LL, sub_185C); 看到一个 sub_185c 这个函数的调用，其实我们大概能根据 qsort 猜出来，他是根据全面的 hook 的请求参数来进行一个 sort 排序， 在下文我们能看到这个”bcb2e93c6b527180099601a2dd8ef8b1”这个字符串，很大可能性是在下文的 SIGNMD5()这个函数中的进行 md5 加盐的操作 我们进入 SIGNMD5 函数查看 已经很像 Md5 的操作，还需经进入 sub_C18 查看 已经很明显看到 这个是 md5 加密中的 k 表的第一个 但是下文的结构也不是很像，所以我们具体要 hook 一下，然后手动 md5 加密看看，是否为标准的 md5 加密。","categories":[{"name":"逆向","slug":"逆向","permalink":"https://lpy30m.github.io/skuukzky.github.io/categories/%E9%80%86%E5%90%91/"}],"tags":[]},{"title":"某东4.7jsvmp 算法还原","slug":"逆向/某东4-7jsvmp-算法还原","date":"2024-08-23T04:44:22.000Z","updated":"2024-08-23T05:50:38.322Z","comments":true,"path":"2024/08/23/逆向/某东4-7jsvmp-算法还原/","permalink":"https://lpy30m.github.io/skuukzky.github.io/2024/08/23/%E9%80%86%E5%90%91/%E6%9F%90%E4%B8%9C4-7jsvmp-%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F/","excerpt":"","text":"京东 h5st 4.7.4H5st以下参数皆为研究时随机参数 并不 是同一请求 全部参数 特别注意的是在 aes 加密过程中用的 fp 需要和第二段保持一致 否则将会请求失败。 12345678920240721134400770; 第一段5t96nmyigzygygy9; 第二段74f42; 第三段tk03wbb161bb218ny47exhUsIoE3D7lHbxbZgTik7YqisIFvWjBTQG8XlY2fmxSJ5sec_Q95KVeW9RG8w227CEONjo52;第四段f4a8befb0820e360d42ba0a7805b81e0; 第五段 新增一段4.7; 第六段1721532832275; 第七段UOWRm8fD2k3wKIklaB5h58P7JQx1oXrg_gB7U7jVoEs1NiltSlNQddHgLqVLdjHSiXGLgu72eJ7n13kJgBCBIIHceQiv3eNMhgHk1ZUbAPT4josbXzPcT4mD-ZqTokNYpDn-IifpL1SQ_X7FmySgoTTmntIOskhmlQfn2MvsQZJE6JK80ykJk3DjWsqWSKWJyzA0_NsXY2m5NBWtpTOQ9rljTB8IWGrJR9R_aH5RLHnbpaoXOrXHhE1oJ9IZc9zRYaKSXjaFhRqhCdGqq4wW9GASnk6ddS2HYMMfOYfCLVCQkWp6f725741DXfhF94h2Kssd4eedjcIl5HIlyOlFvHsFRTmsnIOKqSLln_6hbg04svF3qgBbQVAKsqCnsVCuVTB0QCJ4pBu3aWHAKjuvyYyDwxL3E2UTOq5A8_dGSqEiSU1MrfZy--K3O56hREYguSt09mu3Rb6RtORJu8aBFo5n; 第八段 魔改aes4b8b4c86155f61276e7a8df6ffc8dcdc 第九段 新增一段 第一段123456789101112//根据当前时间戳转换的 1721540640770 --&gt;20240721134400770function formatTime(timestamp) &#123; const date = new Date(timestamp); const year = date.getFullYear(); const month = (date.getMonth() + 1).toString().padStart(2, &quot;0&quot;); const day = date.getDate().toString().padStart(2, &quot;0&quot;); const hours = date.getHours().toString().padStart(2, &quot;0&quot;); const minutes = date.getMinutes().toString().padStart(2, &quot;0&quot;); const seconds = date.getSeconds().toString().padStart(2, &quot;0&quot;); const milliseconds = date.getMilliseconds().toString().padStart(3, &quot;0&quot;); return `$&#123;year&#125;$&#123;month&#125;$&#123;day&#125;$&#123;hours&#125;$&#123;minutes&#125;$&#123;seconds&#125;$&#123;milliseconds&#125;`;&#125; 第二段1234567891011121314151617//生成的 fingerprinte.generateVisitKey = function () &#123; let t = &quot;1uct6d0jhq&quot;; //改变了 还没找到 let o = k(t, 5); let i = y(); let c = _(t, o); let s = m(&#123; size: i, num: c &#125;) + o + m(&#123; size: 16 - 5 - 1 - i, num: c &#125;) + i; let u = s.split(&quot;&quot;); let l = u.slice(0, 15); let p = u.slice(15); let v = []; while (l.length &gt; 0) &#123; v.push((35 - parseInt(l.pop(), 36)).toString(36)); &#125; return v.concat(p).join(&quot;&quot;);&#125;; 第三段1//appid, 每个接口都有一个对应的值 第四段1获取到的token 第五段 1234567891011121314151617181920212223242526272829//item.jd.com(function anonymous() &#123; return function test(tk, fp, ts, ai, algo) &#123; // ai 为73806 且为固定数 var rd = &quot;jr6qBP48qndB&quot;; var str = &quot;&quot;.concat(tk).concat(fp).concat(ts).concat(ai).concat(rd); return algo.HmacSHA256(str, tk); &#125;;&#125;);/*在经过t.algo.HMAC 时候 自写了 init和ekey 函数其中init函数应该是初始化字符串ekey函数操作是tk03w8c3e1c3e18nXPECn0kkSU01SK7QBOZ6CnS2ONny98eulgMemppU2VFRzTrfjau4E0ZztEMdpNbOHSCRv8SclwgS 反转字符串---&gt;vmp操作后得到&#x27;kn3* 这个字符串暂时不知道怎么来的 但多次测试是固定的(包括更换设备更换浏览器更换账号等) 应该和某个固定字符串有关 &#x27;kn3*8c3e1c3e18nXPECn0kkSU01SK7QBOZ6CnS2ONny98eulgMemppU2VFRzTrfjau4E0ZztEMdpNbOHSCRv8SclwgS*//*[sign] __makeSign, result:&#123; &quot;key&quot;: &quot;1146b5b7dd7d22e0a54dbc15b88e3d3af128bbf4d9a7202f70bd17f648619b19f4a7bea82ac734a3e9846ddfa77889c82ae195fa659aab5dafcd9f39d0ca997d&quot;, &quot;signStr&quot;: &quot;cf39e022791e801e8e14831caf9ce9ba&quot;, &quot;_stk&quot;: &quot;r,t&quot;, &quot;_ste&quot;: 1, &quot;h5st&quot;: &quot;20240724162804806;65i6tgyn9m5zzzi5;73806;tk03wb5891cc618nLyxfAEBtCpMCZjxBj2zClh3zmA66NEPAbCgNviddGCDhG71yVMBcjItUgiu_ZAc3Gywo8QbnjqWT;cf39e022791e801e8e14831caf9ce9ba;4.7;1721809684806;UOmmZVMpjhlF79xYgh738cOy_ODWEgb7Yup7dEol2JF27v4kqKSLKMqNG3pEHTFJRf-odLa1vnNCtjj9ElYBbCjkPbWYU7HJlGyhMiT-SHASJA-gEkuJTMM78rLGFZdgCbfMpt-sdfRCrw57yOVdgSiAf4q2r5igXFEmLeSWWXrlTdHAfIozsGdsOPp6_VL-ffPmbpCtne3f8eV94isG75oexYsT2BBJKhorpaTxIaUrc_pQDqu4JV3kSI7KkVVqCRyjBVi0M64P8BEq_eOzchggqqWSXPIYV0Lay933IbGUEiW62DNv6DQO_bjnmEauatShWIgckcVMADGRP0IUP2w6o_DL1BZHEVhWlt3rQEUEBluS6QH1to002ho4zGr6P-A80a6PXFzj0V2CWmsbxdtefFQBuzPcacrWVP2EapUUjYoXOrXHhE1oJ9IZc9zRYaKSXjaFhRqhCdGqq4wW9GASnk6ddS2HYMMfOYfCLVCQkWp6f725741DXfhF94h2Kssd4eedjcIl5HIlyOlFvHsFRTmsnIOKqSLln_6hbg04svF3qgBbQVAKsqCnsVCuVTB0QCJ4pBu3aWHAKjuvyYyDwxL3E2UTOq5A8_dGSqEiSU1MrfZy--K3O56hREYguSt09mu3Rb6RtORJu8aBFo5n;73b25807580cfabdd047818058c75e83&quot;&#125;hmac 如sha256 他的操作就是 先经过上述的ekey反转字符串 当作为hmac的key 密文和md5大同小异 而密文就是tk03wb5891cc618nLyxfAEBtCpMCZjxBj2zClh3zmA66NEPAbCgNviddGCDhG71yVMBcjItUgiu_ZAc3Gywo8QbnjqWT 65i6tgyn9m5zzzi5 20240724162804806 47 73806 AfUt6ACvKwFn7n5&lt;G*tk拼接第二段在拼接第一段拼接47拼接appid拼接algo中的rd值拼接salt盐7n5&lt;G*后续操作同下述操作*/ 123456789101112tk03wbb161bb218ny47exhUsIoE3D7lHbxbZgTik7YqisIFvWjBTQG8XlY2fmxSJ5sec_Q95KVeW9RG8w227CEONjo525t96nmyigzygygy9202407211509126964774f428egu1x3bttOY7n5&lt;G* ---md5-&gt; b8df766f084d15a71eb7422a2c999137b8df766f084d15a71eb7422a2c999137appid:pc_home_page&amp;client:pc&amp;clientVersion:1.0.0&amp;functionId:getAlwaysBuyGoods&amp;t:1721545191402b8df766f084d15a71eb7422a2c9991377n5&lt;G* --&gt;md5-&gt; 810c4f5c06a1307bc27490e3ffe80fcf总的来说 第五段的生成 是第四段token拼接第二段 在拼接第一段在拼接4774f428egu1x3bttOY加上salt值7n5&lt;G* 生成md5值后按键值对大小拼接body中的appid和client和clientVersion和functionid和t,最后在拼接一下生成的md5值和salt值7n5&lt;G*生成的结果即为第五段结果至于 4774f428egu1x3bttOY 怎么来的，还没能研究透彻，但多次测试发现是固定的，可能与个人账号有关。algo:function test(tk,fp,ts,ai,algo)&#123;var rd=&#x27;IuxIY6nBYZ8r&#x27;;var str=&quot;&quot;.concat(tk).concat(fp).concat(ts).concat(ai).concat(rd);return algo.HmacMD5(str,tk);&#125;现在发现 47是固定的 而 74f42是appid即第三段 8egu1x3bttOY是algo中的盐 即rd的值如果请求参数带body 则需要把body进行sha256加密 然后带入第五段流程加密 第六段1版本号 4.7 第七段1与第一段相关 为时间戳 第八段123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134//aes加密key =&#x27;_M6Y?dvfN40VMF[X&#x27;;iv =&#x27;0102030405060708&#x27;;//魔改了aes 自定义了几个方法用于base64的编码设置v.Utils = &#123; toWordArray: function(e) &#123; for (var r = [], n = 0; n &lt; e.length; n++) r[n &gt;&gt;&gt; 2] |= e[n] &lt;&lt; 24 - n % 4 * 8; return t.lib.WordArray.create(r, e.length) &#125;, fromWordArray: function(e) &#123; for (var t = new Uint8Array(e.sigBytes), r = 0; r &lt; e.sigBytes; r++) t[r] = e.words[r &gt;&gt;&gt; 2] &gt;&gt;&gt; 24 - r % 4 * 8 &amp; 255; return t &#125;&#125;;//一段jsvmp _append: function(e) &#123; for (var t, r, n = c, a = i, o = [], l = 0; ; ) switch (a[l++]) &#123; case 6: t = o[o.length - 1]; break; case 13: o.push(this); break; case 21: o.push(k); break; case 32: o.push(o[o.length - 1]); break; case 35: e = o[o.length - 1]; break; case 36: o[o.length - 2][s[a[l++]]] = o[o.length - 1], o[o.length - 2] = o[o.length - 1], o.length--; break; case 41: return; case 45: o.push(a[l++]); break; case 49: r = o.pop(), o[o.length - 1] += r; break; case 57: o.push(e); break; case 60: o.push(null); break; case 66: o[o.length - 1] = o[o.length - 1][s[a[l++]]]; break; case 67: o.push(t); break; case 69: o[o.length - 1] = Dg(o[o.length - 1]); break; case 72: o.pop(); break; case 73: o[o.length - 1] ? (++l, --o.length) : l += a[l]; break; case 75: o.push(o[o.length - 1]), o[o.length - 2] = o[o.length - 2][s[a[l++]]]; break; case 80: r = o.pop(), o[o.length - 1] = o[o.length - 1] == r; break; case 90: null != o[o.length - 2] ? (o[o.length - 3] = n.call(o[o.length - 3], o[o.length - 2], o[o.length - 1]), o.length -= 2) : (r = o[o.length - 3], o[o.length - 3] = r(o[o.length - 1]), o.length -= 2); break; case 95: o.push(u) &#125;&#125;, /*我们插装发现 他翻转了密钥 X[FMV04Nfvd?Y6M_其实这个aes整体并没做太大的魔改，只是把密钥给反转了而已，算法是原生的aes 主要魔改了base64算法 才使其加密的结果不同*/ //魔改base64算法 我们把所有运算符的操作给打上日志点，根据规律慢慢还原。 encode: function (t) &#123; let r = e.enc.Utils.fromWordArray(t) let array = new Array(0) let n = array.slice.apply(r) let a = new Array(0) Array.prototype.push.apply(a, n) for (let o = 3 - a.length % 3, u = 0; u &lt; o; u++) &#123; a.push(o) &#125; let l = new Array(0) for (let i = a.length - 1; i &gt;= 0; i = i - 3) &#123; a.slice(i - 2, i + 1) Array.prototype.push.apply(l, a.slice(i - 2, i + 1)) &#125; let f = e.enc.Utils.toWordArray(l) let g = f.words let p = f.sigBytes let v = this._map1 f.clamp(f) let d = new Array(0) for (let b = 0; b &lt; p; b += 3) &#123; let y = g[b &gt;&gt;&gt; 2] &gt;&gt;&gt; (24 - b * 8) &amp; 255 let k = g[(b + 1) &gt;&gt;&gt; 2] &gt;&gt;&gt; (24 - (b + 1) * 8) &amp; 255 let m = g[(b + 2) &gt;&gt;&gt; 2] &gt;&gt;&gt; (24 - (b + 2) * 8) &amp; 255 let w = y &lt;&lt; 16 | k &lt;&lt; 8 | m for (let _ = 0; _ &lt; 4; _++) &#123; if ((b + (_ * 0.75)) &lt; p) &#123; d.push(v.charAt((w &gt;&gt;&gt; 6 * (3 - _) &amp; 63))) &#125; &#125; &#125; let x = [] for (let j = 0; j &lt; d.length; j += 4) &#123; x.push.apply(x, d.slice(j, j + 4).reverse()) &#125; return x.join(&quot;&quot;) &#125; 第九段12345678tk03wbb161bb218ny47exhUsIoE3D7lHbxbZgTik7YqisIFvWjBTQG8XlY2fmxSJ5sec_Q95KVeW9RG8w227CEONjo525t96nmyigzygygy9202407211245081744774f428egu1x3bttOY7n5&lt;G* --&gt; a1957d7fbdd8687cc8a075743aae865aa1957d7fbdd8687cc8a075743aae865aappid:pc_home_page&amp;functionId:getAlwaysBuyGoodsa1957d7fbdd8687cc8a075743aae865a7n5&lt;G* ---&gt;4b8b4c86155f61276e7a8df6ffc8dcdc现在发现 47是固定的 而 74f42是appid即第三段 8egu1x3bttOY是algo中的盐所以第8段的加密即为 第五段tk拼接第二段拼接第一段拼接4774f428egu1x3bttOY在拼接7n5&lt;G* 得到的md5值md5值拼接body中的appid值在拼body中的functionId值在拼接md5值在拼接7n5&lt;G* 就得到了第9段的md5值与第五段比较相近 但不用的在于 第八段之只用到了body中的appid和fucntionid这两个参数。 请求也是问题不大 一些坑点要想实现接口部署还需要部分细节修饰 algo12345对于algo 主要有一个expandParams的参数问题 他和第七段一样也是个aes。主要问题在于他的key不同于第七段 是 wm0!@w-s#ll1flo(加密参数是&#x27;&#123;\\n &quot;wc&quot;: 0,\\n &quot;wd&quot;: 0,\\n &quot;l&quot;: &quot;zh-CN&quot;,\\n &quot;ls&quot;: &quot;zh-CN,en,en-GB,en-US&quot;,\\n &quot;ml&quot;: 2,\\n &quot;pl&quot;: 2,\\n &quot;av&quot;: &quot;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36 Edg/127.0.0.0&quot;,\\n &quot;ua&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36 Edg/127.0.0.0&quot;,\\n &quot;sua&quot;: &quot;Macintosh; Intel Mac OS X 10_15_7&quot;,\\n &quot;pp&quot;: &#123;\\n &quot;p2&quot;: &quot;桥到船头自然沉9060&quot;\\n &#125;,\\n &quot;extend&quot;: &#123;\\n &quot;wd&quot;: 0,\\n &quot;l&quot;: 0,\\n &quot;ls&quot;: 2,\\n &quot;wk&quot;: 0,\\n &quot;bu1&quot;: &quot;0.1.5&quot;,\\n &quot;bu2&quot;: 0,\\n &quot;bu3&quot;: 50,\\n &quot;bu4&quot;: 0,\\n &quot;bu5&quot;: 0,\\n &quot;bu6&quot;: 10\\n &#125;,\\n &quot;pp1&quot;: &quot;&quot;,\\n &quot;w&quot;: 1728,\\n &quot;h&quot;: 1117,\\n &quot;ow&quot;: 1728,\\n &quot;oh&quot;: 992,\\n &quot;url&quot;: &quot;https://paipai.m.jd.com/ppdbd/pages/detail/index?id=389626893&amp;cprice=47&amp;entryid=p0020003hd190531&amp;showhead=no&amp;entryid=p0020003hd190531&amp;scene=null&quot;,\\n &quot;og&quot;: &quot;https://paipai.m.jd.com&quot;,\\n &quot;pf&quot;: &quot;MacIntel&quot;,\\n &quot;pr&quot;: 2,\\n &quot;re&quot;: &quot;&quot;,\\n &quot;random&quot;: &quot;UhHAH4rSHNTC&quot;,\\n &quot;referer&quot;: &quot;&quot;,\\n &quot;v&quot;: &quot;h5_file_v4.7.4&quot;,\\n &quot;bu2&quot;: &quot; at https://storage.360buyimg.com/webcontainer/js_security_v3_0.1.5.js:3833:21&quot;,\\n &quot;canvas&quot;: &quot;fa3fabf83a3dc96ca518dcdec635e8d9&quot;,\\n &quot;webglFp&quot;: &quot;e3873b69ce54d5eb4893fad2d0592dda&quot;,\\n &quot;ccn&quot;: 14,\\n &quot;ai&quot;: &quot;86b9f&quot;,\\n &quot;fp&quot;: &quot;n5yi5yn5ytzg69i1&quot;\\n&#125;&#x27;主要是ai 也就是appid 和fp 的处理问题就可以实现动态请求 random其实可以处理可以不处理","categories":[{"name":"逆向","slug":"逆向","permalink":"https://lpy30m.github.io/skuukzky.github.io/categories/%E9%80%86%E5%90%91/"}],"tags":[]},{"title":"qqsign jsvmp算法还原","slug":"逆向/jsvmp-QQ音乐sign","date":"2024-08-23T04:40:22.000Z","updated":"2024-08-23T05:42:22.577Z","comments":true,"path":"2024/08/23/逆向/jsvmp-QQ音乐sign/","permalink":"https://lpy30m.github.io/skuukzky.github.io/2024/08/23/%E9%80%86%E5%90%91/jsvmp-QQ%E9%9F%B3%E4%B9%90sign/","excerpt":"","text":"jsvmp-qq 音乐","categories":[{"name":"逆向","slug":"逆向","permalink":"https://lpy30m.github.io/skuukzky.github.io/categories/%E9%80%86%E5%90%91/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2024-08-23T03:25:04.899Z","updated":"2024-08-23T03:25:04.899Z","comments":true,"path":"2024/08/23/hello-world/","permalink":"https://lpy30m.github.io/skuukzky.github.io/2024/08/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"逆向","slug":"逆向","permalink":"https://lpy30m.github.io/skuukzky.github.io/categories/%E9%80%86%E5%90%91/"}],"tags":[]}